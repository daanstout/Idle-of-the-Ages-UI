<?xml version="1.0"?>
<doc>
    <assembly>
        <name>IdleOfTheAgesLib</name>
    </assembly>
    <members>
        <member name="T:IdleOfTheAgesLib.Activity.IActivity">
            <summary>
            An activity the user can do.
            </summary>
        </member>
        <member name="M:IdleOfTheAgesLib.Activity.IActivity.Tick(System.Single)">
            <summary>
            Ticks the activity.
            </summary>
            <param name="deltaTime">The time since the last tick.</param>
        </member>
        <member name="T:IdleOfTheAgesLib.Activity.IActivityLibrary">
            <summary>
            A library to keep track of all activities the player can do.
            </summary>
        </member>
        <member name="T:IdleOfTheAgesLib.Activity.IActivityService">
            <summary>
            Keeps track of the current activity the user is doing.
            </summary>
        </member>
        <member name="T:IdleOfTheAgesLib.IModObject">
            <summary>
            Contains all relevant mod data.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.IModObject.Logger">
            <summary>
            Gets a logger to log data to.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.IModObject.Mod">
            <summary>
            Gets the instance of the mod's initializer class.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.IModObject.Namespace">
            <summary>
            Gets the namespace of the mod.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.IModObject.ServiceLibrary">
            <summary>
            Gets the mod's private service library.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.IModObject.ServiceRegistry">
            <summary>
            Gets the service registry from this mod to register services to.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.IModObject.ModAssembly">
            <summary>
            Gets the mod's assembly.
            </summary>
        </member>
        <member name="T:IdleOfTheAgesLib.DependencyInjection.CyclicalDependencyException">
            <summary>
            An exception that is thrown when 2 dependencies have a cyclical dependency on each other.
            </summary>
        </member>
        <member name="M:IdleOfTheAgesLib.DependencyInjection.CyclicalDependencyException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IdleOfTheAgesLib.DependencyInjection.CyclicalDependencyException"/> class.
            </summary>
        </member>
        <member name="M:IdleOfTheAgesLib.DependencyInjection.CyclicalDependencyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IdleOfTheAgesLib.DependencyInjection.CyclicalDependencyException"/> class.
            with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:IdleOfTheAgesLib.DependencyInjection.CyclicalDependencyException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IdleOfTheAgesLib.DependencyInjection.CyclicalDependencyException"/> class with a specified error.
            message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference
            (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:IdleOfTheAgesLib.DependencyInjection.IDependencyInjector">
            <summary>
            A service that can inject objects with dependencies.
            </summary>
        </member>
        <member name="M:IdleOfTheAgesLib.DependencyInjection.IDependencyInjector.InjectDependencies(System.Object)">
            <summary>
            Injects an object with its dependencies through a function called: <code>InjectDependencies(...).</code>
            </summary>
            <param name="target">The object to inject.</param>
            <returns>Whether there were any issues with the injection.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="target"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="target"/> does not contain a function called `InjectDependencies`.</exception>
        </member>
        <member name="T:IdleOfTheAgesLib.DependencyInjection.IResolver">
            <summary>
            A resolver to resolve a dependency to an instance.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.DependencyInjection.IResolver.Factory">
            <summary>
            Gets or sets a factory that can be used to resolve the instance.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.DependencyInjection.IResolver.IsSingleton">
            <summary>
            Gets or sets a value indicating whether a boolean that indicates whether or not the target is a singleton.
            </summary>
        </member>
        <member name="M:IdleOfTheAgesLib.DependencyInjection.IResolver.Resolve(IdleOfTheAgesLib.DependencyInjection.IServiceLibrary)">
            <summary>
            Resolves the dependency to the instance, creating a new one if one doesn't exist yet.
            </summary>
            <param name="serviceLibrary">The <see cref="T:IdleOfTheAgesLib.DependencyInjection.IServiceLibrary"/> to obtain the dependencies from.</param>
            <returns>An instance of the dependency.</returns>
        </member>
        <member name="M:IdleOfTheAgesLib.DependencyInjection.IResolver.ToInstance(System.Object)">
            <summary>
            Sets the instance this resolver should use.
            </summary>
            <param name="instance">The instance to use.</param>
        </member>
        <member name="M:IdleOfTheAgesLib.DependencyInjection.IResolver.SetInstanceType(System.Type)">
            <summary>
            Sets the type created instances should be.
            </summary>
            <param name="instanceType">The type created instances should be.</param>
        </member>
        <member name="T:IdleOfTheAgesLib.DependencyInjection.IResolver`1">
            <summary>
            A resolver to resolve a dependency to an instance.
            </summary>
            <typeparam name="TType">The type the resolver resolves for.</typeparam>
        </member>
        <member name="M:IdleOfTheAgesLib.DependencyInjection.IResolver`1.Resolve(IdleOfTheAgesLib.DependencyInjection.IServiceLibrary)">
            <summary>
            Resolves the dependency to the instance, creating a new one if one doesn't exist yet.
            </summary>
            <param name="serviceLibrary">The <see cref="T:IdleOfTheAgesLib.DependencyInjection.IServiceLibrary"/> to obtain the dependencies from.</param>
            <returns>An instance of the dependency.</returns>
        </member>
        <member name="T:IdleOfTheAgesLib.DependencyInjection.IServiceLibrary">
            <summary>
            A library where services that are registered through a <see cref="T:IdleOfTheAgesLib.DependencyInjection.IServiceRegistry"/> can be obtained from.
            </summary>
        </member>
        <member name="M:IdleOfTheAgesLib.DependencyInjection.IServiceLibrary.Get``1(System.String)">
            <summary>
            Gets the instance for the requested <typeparamref name="TType"/>.
            </summary>
            <typeparam name="TType">The type to get the instance for.</typeparam>
            <param name="key">The key to the specific instance.</param>
            <returns>The requested instance.</returns>
        </member>
        <member name="M:IdleOfTheAgesLib.DependencyInjection.IServiceLibrary.Get(System.Type,System.String)">
            <summary>
            Gets the instance for the requested <paramref name="type"/>.
            </summary>
            <param name="type">The type to get the instance for.</param>
            <param name="key">The key to the specific instance.</param>
            <returns>The requested instance.</returns>
        </member>
        <member name="M:IdleOfTheAgesLib.DependencyInjection.IServiceLibrary.GetAllServiceNames">
            <summary>
            Obtains a list of the names of all registered services that can be obtained.
            </summary>
            <returns>A list of names of all registered services.</returns>
        </member>
        <member name="M:IdleOfTheAgesLib.DependencyInjection.IServiceLibrary.GetAllServices(System.Type)">
            <summary>
            Obtains a list of all services that are registered for a given type, regardless of the key they have been registered with.
            </summary>
            <param name="type">The type to search for.</param>
            <returns>A list of all interfaces for the provided type.</returns>
        </member>
        <member name="M:IdleOfTheAgesLib.DependencyInjection.IServiceLibrary.GetAllServices``1">
            <summary>
            Obtains a list of all services that are registered for a given type, regardless of the key they have been registered with.
            </summary>
            <typeparam name="TType">The type to search for.</typeparam>
            <returns>A list of all interfaces for the provided type.</returns>
        </member>
        <member name="M:IdleOfTheAgesLib.DependencyInjection.IServiceLibrary.ContainsService``1(System.String)">
            <summary>
            Checks whether or not a service is registered with the given key.
            </summary>
            <typeparam name="TType">The service to check for.</typeparam>
            <param name="key">The key to check with.</param>
            <returns><see langword="true"/> if the service exists, <see langword="false"/> if not.</returns>
        </member>
        <member name="M:IdleOfTheAgesLib.DependencyInjection.IServiceLibrary.ContainsService(System.Type,System.String)">
            <summary>
            Checks whether or not a service is registered with the given key.
            </summary>
            <param name="type">The service to check for.</param>
            <param name="key">The key to check with.</param>
            <returns><see langword="true"/> if the service exists, <see langword="false"/> if not.</returns>
        </member>
        <member name="M:IdleOfTheAgesLib.DependencyInjection.IServiceLibrary.TryGet``1(``0@,System.String)">
            <summary>
            Tries to get the instance for the requested <typeparamref name="TType"/>.
            </summary>
            <typeparam name="TType">The type to get the instance for.</typeparam>
            <param name="result">The instance.</param>
            <param name="key">The key to the specific instance.</param>
            <returns><see langword="true"/> if the instance was succesfully found. <see langword="false"/> if not.</returns>
        </member>
        <member name="M:IdleOfTheAgesLib.DependencyInjection.IServiceLibrary.TryGet(System.Type,System.Object@,System.String)">
            <summary>
            Tries to get the instance for the requested <paramref name="type"/>.
            </summary>
            <param name="type">The type to get the instance for.</param>
            <param name="result">The instance.</param>
            <param name="key">The key to the specific instance.</param>
            <returns><see langword="true"/> if the instance was succesfully found. <see langword="false"/> if not.</returns>
        </member>
        <member name="T:IdleOfTheAgesLib.DependencyInjection.IServiceRegistry">
            <summary>
            A registry where services can be registered to, which can then be obtained through the <see cref="T:IdleOfTheAgesLib.DependencyInjection.IServiceLibrary"/>.
            </summary>
        </member>
        <member name="M:IdleOfTheAgesLib.DependencyInjection.IServiceRegistry.Bind(System.Type,System.String)">
            <summary>
            Obtains the <see cref="T:IdleOfTheAgesLib.DependencyInjection.IResolver"/> for the provided <paramref name="type"/> and <paramref name="key"/> combination.
            <para>If no resolver exists, a new one will be created.</para>
            <para>Note that if no resolver exists and <paramref name="type"/> is either an interface or an abstract class, a factory should be provided as otherwise the resolver will throw an error when resolving.</para>
            </summary>
            <param name="type">The type to get the resolver for.</param>
            <param name="key">The key to the specific dependency required.</param>
            <returns>The <see cref="T:IdleOfTheAgesLib.DependencyInjection.IResolver"/> for the <paramref name="type"/> and <paramref name="key"/> combination.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="type"/> is null.</exception>
        </member>
        <member name="M:IdleOfTheAgesLib.DependencyInjection.IServiceRegistry.Bind``1(System.String)">
            <summary>
            Obtains the <see cref="T:IdleOfTheAgesLib.DependencyInjection.IResolver`1"/> for the provided <typeparamref name="TType"/> and <paramref name="key"/> combination.
            <para>If no resolver exists, a new one will be created.</para>
            <para>Note that if no resolver exists and <typeparamref name="TType"/> is either an interface or an abstract class, a factory should be provided as otherwise the resolver will throw an error when resolving.</para>
            </summary>
            <typeparam name="TType">The type to get the resolver for.</typeparam>
            <param name="key">The key to the specific dependency required.</param>
            <returns>The <see cref="T:IdleOfTheAgesLib.DependencyInjection.IResolver`1"/> for the <typeparamref name="TType"/> and <paramref name="key"/> combination.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <typeparamref name="TType"/> is null.</exception>
        </member>
        <member name="M:IdleOfTheAgesLib.DependencyInjection.IServiceRegistry.RegisterService``2(System.String)">
            <summary>
            Registers a service to the library.
            </summary>
            <typeparam name="TInterface">The type of the interface.</typeparam>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <param name="key">The key to store the service under.</param>
            <returns>If succesful, the resolver the service has been registered under, if not succesful, <see langword="null"/>.</returns>
        </member>
        <member name="M:IdleOfTheAgesLib.DependencyInjection.IServiceRegistry.RegisterService(System.Type,System.Type,System.String)">
            <summary>
            Registers a service to the library.
            </summary>
            <param name="interfaceType">The type of the interface.</param>
            <param name="implementationType">The type of the implementation.</param>
            <param name="key">The key to store the service under.</param>
            <returns>If succesful, the resolver the service has been registered under, if not succesful, <see langword="null"/>.</returns>
        </member>
        <member name="M:IdleOfTheAgesLib.DependencyInjection.IServiceRegistry.RegisterService``1(System.Func{IdleOfTheAgesLib.DependencyInjection.IServiceLibrary,``0},System.String)">
            <summary>
            Registers a service to the library.
            </summary>
            <typeparam name="TInterface">The type of the interface.</typeparam>
            <param name="factory">A factory that is used to create the instance.</param>
            <param name="key">The key to store the service under.</param>
            <returns>If succesful, the resolver the service has been registered under, if not succesful, <see langword="null"/>.</returns>
        </member>
        <member name="M:IdleOfTheAgesLib.DependencyInjection.IServiceRegistry.RegisterService(System.Type,System.Func{IdleOfTheAgesLib.DependencyInjection.IServiceLibrary,System.Object},System.String)">
            <summary>
            Registers a service to the library.
            </summary>
            <param name="interfaceType">The type of the interface.</param>
            <param name="factory">A factory that is used to create the instance.</param>
            <param name="key">The key to store the service under.</param>
            <returns>If succesful, the resolver the service has been registered under, if not succesful, <see langword="null"/>.</returns>
        </member>
        <member name="M:IdleOfTheAgesLib.DependencyInjection.IServiceRegistry.RegisterService``2(System.Func{IdleOfTheAgesLib.DependencyInjection.IServiceLibrary,``0},System.String)">
            <summary>
            Registers a service to the library.
            </summary>
            <typeparam name="TInterface">The type of the interface.</typeparam>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <param name="factory">A factory that is used to create the instance.</param>
            <param name="key">The key to store the service under.</param>
            <returns>If succesful, the resolver the service has been registered under, if not succesful, <see langword="null"/>.</returns>
        </member>
        <member name="M:IdleOfTheAgesLib.DependencyInjection.IServiceRegistry.RegisterService(System.Type,System.Type,System.Func{IdleOfTheAgesLib.DependencyInjection.IServiceLibrary,System.Object},System.String)">
            <summary>
            Registers a service to the library.
            </summary>
            <param name="interfaceType">The type of the interface.</param>
            <param name="implementationType">The type of the implementation.</param>
            <param name="factory">A factory that is used to create the instance.</param>
            <param name="key">The key to store the service under.</param>
            <returns>If succesful, the resolver the service has been registered under, if not succesful, <see langword="null"/>.</returns>
        </member>
        <member name="T:IdleOfTheAgesLib.DependencyIdentifierAttribute">
            <summary>
            An attribute that can be applied to parameters to provide a key to the required dependency.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.DependencyIdentifierAttribute.Key">
            <summary>
            Gets key of the dependency instance to obtain.
            </summary>
        </member>
        <member name="M:IdleOfTheAgesLib.DependencyIdentifierAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IdleOfTheAgesLib.DependencyIdentifierAttribute"/> class.
            </summary>
            <param name="key">The key of the dependency instance to obtain.</param>
        </member>
        <member name="T:IdleOfTheAgesLib.ServiceLevelEnum">
            <summary>
            Can be used to indicate whether the service is only for private use, or also for public use.
            </summary>
        </member>
        <member name="F:IdleOfTheAgesLib.ServiceLevelEnum.None">
            <summary>
            Default value.
            </summary>
        </member>
        <member name="F:IdleOfTheAgesLib.ServiceLevelEnum.Public">
            <summary>
            The service can also be requested by other mods.
            </summary>
        </member>
        <member name="F:IdleOfTheAgesLib.ServiceLevelEnum.Private">
            <summary>
            The service is only for the mod itself.
            </summary>
        </member>
        <member name="T:IdleOfTheAgesLib.ServiceAttribute`1">
            <summary>
            An attribute that can be put on services to indicate they are a service.
            <para>Using this attribute makes it so you don't have to register services in a <see cref="T:IdleOfTheAgesLib.DependencyInjection.IServiceRegistry"/>.</para>
            </summary>
            <typeparam name="TInterface">The type of the interface that the service is implementing.</typeparam>
        </member>
        <member name="M:IdleOfTheAgesLib.ServiceAttribute`1.#ctor">
            <summary>
            An attribute that can be put on services to indicate they are a service.
            <para>Using this attribute makes it so you don't have to register services in a <see cref="T:IdleOfTheAgesLib.DependencyInjection.IServiceRegistry"/>.</para>
            </summary>
            <typeparam name="TInterface">The type of the interface that the service is implementing.</typeparam>
        </member>
        <member name="P:IdleOfTheAgesLib.ServiceAttribute`1.InterfaceType">
            <summary>
            Gets the type of the interface this service is implementing.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.ServiceAttribute`1.Key">
            <summary>
            Gets the key for identifying this service.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.ServiceAttribute`1.ServiceLevel">
            <summary>
            Gets whether this service should be public or private.
            </summary>
        </member>
        <member name="T:IdleOfTheAgesLib.Extensions.ServiceLibrary.ServiceLibraryExtensions">
            <summary>
            Contains extensions for the <see cref="T:IdleOfTheAgesLib.DependencyInjection.IServiceLibrary"/> interface.
            </summary>
        </member>
        <member name="M:IdleOfTheAgesLib.Extensions.ServiceLibrary.ServiceLibraryExtensions.GetInstances(IdleOfTheAgesLib.DependencyInjection.IServiceLibrary,System.Collections.Generic.IEnumerable{System.Reflection.ParameterInfo})">
            <summary>
            Obtains instances for the provided <paramref name="types"/>.
            </summary>
            <param name="serviceLibrary">The service library to get the instances from.</param>
            <param name="types">The parameters to obtain instances for.</param>
            <returns>An <see cref="T:System.Array"/> containing the instances in order.</returns>
        </member>
        <member name="T:IdleOfTheAgesLib.FSM.FinishState`1">
            <summary>
            A state that indicates that the state machine is finished.
            </summary>
            <typeparam name="T">The type of the context data the state operates on.</typeparam>
        </member>
        <member name="P:IdleOfTheAgesLib.FSM.FinishState`1.Instance">
            <summary>
            Gets a static instance to use.
            </summary>
        </member>
        <member name="M:IdleOfTheAgesLib.FSM.FinishState`1.Tick(`0)">
            <inheritdoc/>
        </member>
        <member name="T:IdleOfTheAgesLib.FSM.State`1">
            <summary>
            Represents a state within the state machine.
            </summary>
            <typeparam name="T">The type of the context data the state operates on.</typeparam>
        </member>
        <member name="M:IdleOfTheAgesLib.FSM.State`1.Tick(`0)">
            <summary>
            Does a tick of the state.
            <para>To indicate that the state machine should finish, return the <see cref="P:IdleOfTheAgesLib.FSM.FinishState`1.Instance"/>.</para>
            </summary>
            <param name="input">The input to operate on.</param>
            <returns>The state that should be operated on next. It can be returned itself to keep operating on the same state.</returns>
        </member>
        <member name="M:IdleOfTheAgesLib.FSM.State`1.Finish">
            <summary>
            Call this to indicate that the state machine should finish execution.
            </summary>
            <returns>An instance of the <see cref="T:IdleOfTheAgesLib.FSM.FinishState`1"/> state.</returns>
        </member>
        <member name="T:IdleOfTheAgesLib.FSM.StateMachine`1">
            <summary>
            A state machine that can be used to act based on input.
            </summary>
            <typeparam name="T">The type of the context data the state machine operates on.</typeparam>
        </member>
        <member name="M:IdleOfTheAgesLib.FSM.StateMachine`1.#ctor(IdleOfTheAgesLib.FSM.State{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:IdleOfTheAgesLib.FSM.StateMachine`1"/> class.
            </summary>
            <param name="initialState">The starting state of the state machine.</param>
        </member>
        <member name="M:IdleOfTheAgesLib.FSM.StateMachine`1.Tick(`0)">
            <summary>
            Does a tick of the state machine.
            <para>To indicate that the state machine should finish, return the <see cref="P:IdleOfTheAgesLib.FSM.FinishState`1.Instance"/>.</para>
            </summary>
            <param name="input">The input to operate on.</param>
            <returns><see langword="true"/> if the operation was succesful, <see langword="false"/> if not.</returns>
        </member>
        <member name="M:IdleOfTheAgesLib.FSM.StateMachine`1.RunToCompletion(`0)">
            <summary>
            Runs the state machine to completion.
            </summary>
            <param name="input">The input to the state machine.</param>
            <returns><see langword="true"/> if the state machine ran to completion succesfully, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:IdleOfTheAgesLib.FSM.StateMachineResult">
            <summary>
            Values that the state machine returns to indicate the current state of running the state machine.
            </summary>
        </member>
        <member name="F:IdleOfTheAgesLib.FSM.StateMachineResult.None">
            <summary>
            Default state.
            </summary>
        </member>
        <member name="F:IdleOfTheAgesLib.FSM.StateMachineResult.InProgress">
            <summary>
            The state machine is currently in progress.
            </summary>
        </member>
        <member name="F:IdleOfTheAgesLib.FSM.StateMachineResult.Failed">
            <summary>
            The state machine has failed somewhere along the way.
            </summary>
        </member>
        <member name="F:IdleOfTheAgesLib.FSM.StateMachineResult.Finished">
            <summary>
            The state machine has finished.
            </summary>
        </member>
        <member name="T:IdleOfTheAgesLib.ILogger">
            <summary>
            A logger to log information to.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.ILogger.Namespace">
            <summary>
            Gets the namespace the logger logs to.
            </summary>
        </member>
        <member name="M:IdleOfTheAgesLib.ILogger.Info(System.String,System.Object[])">
            <summary>
            Logs a message to the logger.
            </summary>
            <param name="message">The message to log.</param>
            <param name="objects">Parameters to add to the message.</param>
        </member>
        <member name="M:IdleOfTheAgesLib.ILogger.Warning(System.String,System.Object[])">
            <summary>
            Logs a warning to the logger.
            </summary>
            <param name="message">The message to log.</param>
            <param name="objects">Parameters to add to the message.</param>
        </member>
        <member name="M:IdleOfTheAgesLib.ILogger.Error(System.String,System.Object[])">
            <summary>
            Logs an error to the logger.
            </summary>
            <param name="message">The message to log.</param>
            <param name="objects">Parameters to add to the message.</param>
        </member>
        <member name="M:IdleOfTheAgesLib.ILogger.LogResult(IdleOfTheAgesLib.Result)">
            <summary>
            Logs a <see cref="T:IdleOfTheAgesLib.Result"/> object to the logger.
            </summary>
            <param name="result">The <see cref="T:IdleOfTheAgesLib.Result"/> object to log.</param>
        </member>
        <member name="M:IdleOfTheAgesLib.ILogger.LogResult``1(IdleOfTheAgesLib.Result{``0})">
            <summary>
            Logs a <see cref="T:IdleOfTheAgesLib.Result`1"/> object to the logger.
            </summary>
            <typeparam name="T">The type of the object that the <see cref="T:IdleOfTheAgesLib.Result`1"/> contains.</typeparam>
            <param name="result">The <see cref="T:IdleOfTheAgesLib.Result`1"/> object to log.</param>
        </member>
        <member name="T:IdleOfTheAgesLib.IMod">
            <summary>
            The entry class for a Mod.
            <para>Mod initialization happens in steps:
            <list type="number">
            <item>The <see cref="T:IdleOfTheAgesLib.IModObject"/> is created with the relevant objects for the mod.</item>
            <item>Services with a <see cref="T:IdleOfTheAgesLib.ServiceAttribute`1"/> are registered with the <see cref="T:IdleOfTheAgesLib.DependencyInjection.IServiceRegistry"/>.</item>
            <item><see cref="M:IdleOfTheAgesLib.IMod.RegisterPublicServices(IdleOfTheAgesLib.DependencyInjection.IServiceRegistry)"/> is called, allowing for public services to be registered manually.</item>
            <item><see cref="M:IdleOfTheAgesLib.IMod.RegisterServices(IdleOfTheAgesLib.DependencyInjection.IServiceRegistry)"/> is called, allowing for private services to be registered manually.</item>
            <item><see cref="M:IdleOfTheAgesLib.IMod.ModLoaded(IdleOfTheAgesLib.DependencyInjection.IServiceLibrary)"/> is called. Other mods are still to be loaded, so only do things that need to happen early.</item>
            <item><see cref="M:IdleOfTheAgesLib.IMod.AppLoaded(IdleOfTheAgesLib.DependencyInjection.IServiceLibrary)"/> is called once the game and all mods have been loaded, but before the main menu is shown. This is where menu modifications and game modes should be loaded.</item>
            <item><see cref="M:IdleOfTheAgesLib.IMod.GameLoaded(IdleOfTheAgesLib.DependencyInjection.IServiceLibrary)"/> is called once the player has selected a game. This is where most game modifications should go.</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="M:IdleOfTheAgesLib.IMod.RegisterServices(IdleOfTheAgesLib.DependencyInjection.IServiceRegistry)">
            <summary>
            This function can be used to register the services used by the mod.
            <para>The services registered are registered within the mod's namespace.</para>
            </summary>
            <param name="serviceRegistry">The service registry to register services to.</param>
        </member>
        <member name="M:IdleOfTheAgesLib.IMod.RegisterPublicServices(IdleOfTheAgesLib.DependencyInjection.IServiceRegistry)">
            <summary>
            This function can be used to register services from this mod that should be accessible to other mods.
            <para>Keep in mind that services registered here can only use other public services, or services provided by the base game.
            services registered with <see cref="M:IdleOfTheAgesLib.IMod.RegisterServices(IdleOfTheAgesLib.DependencyInjection.IServiceRegistry)"/> can not be used within public services.</para>
            </summary>
            <param name="serviceRegistry">The service registry to register services to.</param>
        </member>
        <member name="M:IdleOfTheAgesLib.IMod.AppLoaded(IdleOfTheAgesLib.DependencyInjection.IServiceLibrary)">
            <summary>
            This function is called when the app has loaded, before the main menu is shown.
            </summary>
            <param name="serviceLibrary">The service library for this mod.</param>
        </member>
        <member name="M:IdleOfTheAgesLib.IMod.GameLoaded(IdleOfTheAgesLib.DependencyInjection.IServiceLibrary)">
            <summary>
            This function is called when the game has loaded, when the player has selected a save.
            </summary>
            <param name="serviceLibrary">The service library for this mod.</param>
        </member>
        <member name="M:IdleOfTheAgesLib.IMod.ModLoaded(IdleOfTheAgesLib.DependencyInjection.IServiceLibrary)">
            <summary>
            This function is called directly after the mod has been loaded.
            <para>Keep in mind that mod loading in general is still in progress.</para>
            </summary>
            <param name="serviceLibrary">The service library for this mod.</param>
        </member>
        <member name="M:IdleOfTheAgesLib.IMod.LoadData(IdleOfTheAgesLib.DependencyInjection.IServiceLibrary)">
            <summary>
            Loads data into the game.
            </summary>
            <param name="serviceLibrary">The service library for this mod.</param>
        </member>
        <member name="T:IdleOfTheAgesLib.Inventory.IInventoryService">
            <summary>
            Represents the player's inventory.
            </summary>
        </member>
        <member name="M:IdleOfTheAgesLib.Inventory.IInventoryService.AddItem(IdleOfTheAgesLib.Inventory.IItemStack)">
            <summary>
            Adds an item to the player's inventory.
            </summary>
            <param name="item">The item to add to the player's inventory.</param>
            <returns>A <see cref="T:IdleOfTheAgesLib.Result"/> object to check if the call was successful.</returns>
        </member>
        <member name="M:IdleOfTheAgesLib.Inventory.IInventoryService.GetItems">
            <summary>
            Gets all the items in the player's inventory.
            </summary>
            <returns>An enumerable with all the items.</returns>
        </member>
        <member name="T:IdleOfTheAgesLib.Inventory.IItemService">
            <summary>
            A service that holds data about all the items registered in the game.
            </summary>
        </member>
        <member name="M:IdleOfTheAgesLib.Inventory.IItemService.RegisterItem(IdleOfTheAgesLib.Models.ModJsonData.ItemData)">
            <summary>
            Registers an item to the service.
            </summary>
            <param name="item">The item to register.</param>
            <returns>A <see cref="T:IdleOfTheAgesLib.Result"/> object to check if the call was successful.</returns>
        </member>
        <member name="M:IdleOfTheAgesLib.Inventory.IItemService.GetItemData(System.String)">
            <summary>
            Obtains the item data for an item.
            </summary>
            <param name="itemID">The item ID to obtain the item data for.</param>
            <returns>The item data for the item.</returns>
        </member>
        <member name="T:IdleOfTheAgesLib.Inventory.IItemStack">
            <summary>
            Represents a stack of items in the inventory.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Inventory.IItemStack.ItemID">
            <summary>
            Gets the ID of the item this stack represents.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Inventory.IItemStack.ItemData">
            <summary>
            Gets the data for this item.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Inventory.IItemStack.Metadata">
            <summary>
            Gets the metadata for this item.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Inventory.IItemStack.StackSize">
            <summary>
            Gets or sets the amount of items that are in this stack.
            </summary>
        </member>
        <member name="T:IdleOfTheAgesLib.Inventory.IStorageGroup">
            <summary>
            Inherit from this class to add a bank tab.
            </summary>
        </member>
        <member name="T:IdleOfTheAgesLib.Inventory.IStorageService">
            <summary>
            Keeps track of all the items in the storage.
            </summary>
        </member>
        <member name="M:IdleOfTheAgesLib.Inventory.IStorageService.AddItem``1(System.String,System.Int32)">
            <summary>
            Adds an item to the player's storage.
            </summary>
            <typeparam name="TGroup">The storage group to add the item to.</typeparam>
            <param name="itemID">The item to add to the player's storage.</param>
            <param name="count">How many items to add.</param>
            <returns>A <see cref="T:IdleOfTheAgesLib.Result"/> object to check if the call was successful.</returns>
        </member>
        <member name="M:IdleOfTheAgesLib.Inventory.IStorageService.GetItem``1(System.String)">
            <summary>
            Gets an item from the storage.
            </summary>
            <typeparam name="TGroup">The storage group to look in.</typeparam>
            <param name="itemID">The ID of the item to obtain.</param>
            <returns>The requested items.</returns>
        </member>
        <member name="M:IdleOfTheAgesLib.Inventory.IStorageService.ContainsItem``1(System.String)">
            <summary>
            Checks to see if an item with the provided ID exists within the storage.
            </summary>
            <typeparam name="TGroup">The storage group to look in.</typeparam>
            <param name="itemID">The ID of the item to obtain.</param>
            <returns><see langword="true"/> if the item exists, and <see langword="false"/> if not.</returns>
        </member>
        <member name="M:IdleOfTheAgesLib.Inventory.IStorageService.GetItems">
            <summary>
            Gets all the items in the player's storage.
            </summary>
            <returns>An enumerable with all the items.</returns>
        </member>
        <member name="M:IdleOfTheAgesLib.Inventory.IStorageService.GetItems``1">
            <summary>
            Gets all the items in the player's storage that are stored in the given storage group.
            </summary>
            <typeparam name="TGroup">The storage group to get the items from.</typeparam>
            <returns>An enumerable with all the items.</returns>
        </member>
        <member name="T:IdleOfTheAgesLib.Models.Error">
            <summary>
            Represents an error that has occured.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Models.Error.Message">
            <summary>
            Gets the error message that occured.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Models.Error.Exception">
            <summary>
            Gets the exception that would be thrown.
            </summary>
        </member>
        <member name="M:IdleOfTheAgesLib.Models.Error.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IdleOfTheAgesLib.Models.Error"/> class.
            </summary>
            <param name="message">The error that occured.</param>
            <param name="exception">The exception to throw.</param>
        </member>
        <member name="M:IdleOfTheAgesLib.Models.Error.op_Implicit(System.ValueTuple{System.String,System.Exception})~IdleOfTheAgesLib.Models.Error">
            <summary>
            Implicitly casts a <see cref="T:System.Tuple`2"/> of a <see cref="T:System.String"/> and a <see cref="P:IdleOfTheAgesLib.Models.Error.Exception"/> to an <see cref="T:IdleOfTheAgesLib.Models.Error"/>.
            </summary>
            <param name="tuple">The tuple to cast.</param>
        </member>
        <member name="M:IdleOfTheAgesLib.Models.Error.op_Implicit(System.String)~IdleOfTheAgesLib.Models.Error">
            <summary>
            Implicitly casts a <see cref="T:System.String"/> to an <see cref="T:IdleOfTheAgesLib.Models.Error"/>.
            </summary>
            <param name="message">the string to cast.</param>
        </member>
        <member name="T:IdleOfTheAgesLib.Models.JsonConverters.ModDataConverter">
            <summary>
            A converter to deserialize <see cref="T:IdleOfTheAgesLib.Models.ModData"/> objects.
            </summary>
        </member>
        <member name="M:IdleOfTheAgesLib.Models.JsonConverters.ModDataConverter.WriteJson(Newtonsoft.Json.JsonWriter,IdleOfTheAgesLib.Models.ModData,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:IdleOfTheAgesLib.Models.JsonConverters.ModDataConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,IdleOfTheAgesLib.Models.ModData,System.Boolean,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="T:IdleOfTheAgesLib.Models.ModData">
            <summary>
            The data class is used for defining mod gameplay data.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Models.ModData.Namespace">
            <summary>
            Gets the namespace the data sits in.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Models.ModData.SkillCategories">
            <summary>
            Gets the skill categories that the mod adds.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Models.ModData.Skills">
            <summary>
            Gets the skills that the mod adds.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Models.ModData.PageGroups">
            <summary>
            Gets the page groups that the mod adds.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Models.ModData.Pages">
            <summary>
            Gets the pages that the mod adds.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Models.ModData.Items">
            <summary>
            Gets the items that the mod adds.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Models.ModData.Actions">
            <summary>
            Gets the actions that the mod adds.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Models.ModData.LootTables">
            <summary>
            Gets the loot tables that the mod adds.
            </summary>
        </member>
        <member name="M:IdleOfTheAgesLib.Models.ModData.#ctor(System.String,System.Collections.Generic.IReadOnlyList{IdleOfTheAgesLib.Models.ModJsonData.SkillCategoryData},System.Collections.Generic.IReadOnlyList{IdleOfTheAgesLib.Models.ModJsonData.SkillData},System.Collections.Generic.IReadOnlyList{IdleOfTheAgesLib.Models.ModJsonData.PageGroupData},System.Collections.Generic.IReadOnlyList{IdleOfTheAgesLib.Models.ModJsonData.PageData},System.Collections.Generic.IReadOnlyList{IdleOfTheAgesLib.Models.ModJsonData.ItemData},System.Collections.Generic.IReadOnlyList{IdleOfTheAgesLib.Models.ModJsonData.ActionData},System.Collections.Generic.IReadOnlyList{IdleOfTheAgesLib.Models.ModJsonData.LootTable})">
            <summary>
            Initializes a new instance of the <see cref="T:IdleOfTheAgesLib.Models.ModData"/> class.
            </summary>
            <param name="namespace">The namespace of the mod.</param>
            <param name="skillCategories">The skill categories this mod adds.</param>
            <param name="skills">The skills this mod adds.</param>
            <param name="pageGroups">The page groups this mod adds.</param>
            <param name="pages">The pages this mod adds.</param>
            <param name="items">The items this mod adds.</param>
            <param name="actions">The actions this mod adds.</param>
            <param name="lootTables">The loot tables this mod adds.</param>
        </member>
        <member name="T:IdleOfTheAgesLib.Models.ModJsonData.ActionData">
            <summary>
            Contains data about all the actions available within a skill.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Models.ModJsonData.ActionData.SkillID">
            <summary>
            Gets the skill the actions apply to.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Models.ModJsonData.ActionData.Actions">
            <summary>
            Gets the actions that should be added to the skill.
            </summary>
        </member>
        <member name="M:IdleOfTheAgesLib.Models.ModJsonData.ActionData.#ctor(System.String,System.Collections.Generic.IReadOnlyCollection{IdleOfTheAgesLib.Models.ModJsonData.ActionElement})">
            <summary>
            Initializes a new instance of the <see cref="T:IdleOfTheAgesLib.Models.ModJsonData.ActionData"/> class.
            </summary>
            <param name="skillID">The ID of the skill this action is meant to work on.</param>
            <param name="actions">The actions to add to the skill.</param>
        </member>
        <member name="T:IdleOfTheAgesLib.Models.ModJsonData.ActionElement">
            <summary>
            Represents an action that can be done in a skill.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Models.ModJsonData.ActionElement.BaseDuration">
            <summary>
            Gets the base duration it takes to complete the action once.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Models.ModJsonData.ActionElement.BaseXP">
            <summary>
            Gets the base xp amount that should be given to the player per completion.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Models.ModJsonData.ActionElement.BaseExpertise">
            <summary>
            Gets the base expertise amount that should be given to the player per completion.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Models.ModJsonData.ActionElement.BaseExpertisePool">
            <summary>
            Gets the base expertise pool amount that should be given to the player per completion.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Models.ModJsonData.ActionElement.RequiredLevel">
            <summary>
            Gets the required level to do the action.
            </summary>
        </member>
        <member name="M:IdleOfTheAgesLib.Models.ModJsonData.ActionElement.#ctor(System.String,System.String,System.String,System.String,IdleOfTheAgesLib.Models.ModJsonData.SortingOrderData,System.String,System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IdleOfTheAgesLib.Models.ModJsonData.ActionElement"/> class.
            </summary>
            <param name="namespace">The namespace of the element.</param>
            <param name="id">The ID of the element.</param>
            <param name="name">The name of the element.</param>
            <param name="translationKey">The translation key of the element.</param>
            <param name="sortingOrder">The sorting order of the element.</param>
            <param name="thumbnail">The thumbnail for the element.</param>
            <param name="baseDuration">The base duration to complete the action once.</param>
            <param name="baseXP">The base xp obtained per completion.</param>
            <param name="baseExpertise">The base expertise obtained per completion.</param>
            <param name="baseExpertisePool">The base expertise pool obtained per completion.</param>
            <param name="requiredLevel">The required level to do the action.</param>
        </member>
        <member name="T:IdleOfTheAgesLib.Models.ModJsonData.BaseDataElement">
            <summary>
            A base class for data elements.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Models.ModJsonData.BaseDataElement.Namespace">
            <summary>
            Gets the namespace of the object.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Models.ModJsonData.BaseDataElement.ID">
            <summary>
            Gets the ID of the object.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Models.ModJsonData.BaseDataElement.Name">
            <summary>
            Gets the name of the object.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Models.ModJsonData.BaseDataElement.NamespacedID">
            <summary>
            Gets the object's namespaced ID.
            </summary>
        </member>
        <member name="M:IdleOfTheAgesLib.Models.ModJsonData.BaseDataElement.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IdleOfTheAgesLib.Models.ModJsonData.BaseDataElement"/> class.
            </summary>
            <param name="namespace">The namespace of the element.</param>
            <param name="id">The ID of the element.</param>
            <param name="name">The name of the element.</param>
        </member>
        <member name="M:IdleOfTheAgesLib.Models.ModJsonData.BaseDataElement.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:IdleOfTheAgesLib.Models.ModJsonData.BaseDataElement.Equals(IdleOfTheAgesLib.Models.ModJsonData.BaseDataElement)">
            <inheritdoc/>
        </member>
        <member name="M:IdleOfTheAgesLib.Models.ModJsonData.BaseDataElement.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:IdleOfTheAgesLib.Models.ModJsonData.BaseDataElement.op_Equality(IdleOfTheAgesLib.Models.ModJsonData.BaseDataElement,IdleOfTheAgesLib.Models.ModJsonData.BaseDataElement)">
            <summary>
            Checks whether 2 data elements are equal.
            </summary>
            <param name="left">The left data element.</param>
            <param name="right">The right data element.</param>
            <returns><see langword="true"/> if both elements are considered equal, <see langword="false"/> if not.</returns>
        </member>
        <member name="M:IdleOfTheAgesLib.Models.ModJsonData.BaseDataElement.op_Inequality(IdleOfTheAgesLib.Models.ModJsonData.BaseDataElement,IdleOfTheAgesLib.Models.ModJsonData.BaseDataElement)">
            <summary>
            Checks whether 2 data elements are not equal.
            </summary>
            <param name="left">The left data element.</param>
            <param name="right">The right data element.</param>
            <returns><see langword="true"/> if the elements are not considered equal, <see langword="false"/> if they are.</returns>
        </member>
        <member name="T:IdleOfTheAgesLib.Models.ModJsonData.VisisbleDataElement">
            <summary>
            A base class for data elements that are visible to the user.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Models.ModJsonData.VisisbleDataElement.TranslationKey">
            <summary>
            Gets the translation key of the element.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Models.ModJsonData.VisisbleDataElement.SortingOrder">
            <summary>
            Gets the sorting order of this element.
            </summary>
        </member>
        <member name="M:IdleOfTheAgesLib.Models.ModJsonData.VisisbleDataElement.#ctor(System.String,System.String,System.String,System.String,IdleOfTheAgesLib.Models.ModJsonData.SortingOrderData)">
            <summary>
            Initializes a new instance of the <see cref="T:IdleOfTheAgesLib.Models.ModJsonData.VisisbleDataElement"/> class.
            </summary>
            <param name="namespace">The namespace of the element.</param>
            <param name="id">The ID of the element.</param>
            <param name="name">The name of the element.</param>
            <param name="translationKey">The translation key of the element.</param>
            <param name="sortingOrder">The sorting order of the element.</param>
        </member>
        <member name="T:IdleOfTheAgesLib.Models.ModJsonData.ThumbnailDataElement">
            <summary>
            A base class for data elements that are visible to the user and have a thumbnail.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Models.ModJsonData.ThumbnailDataElement.Thumbnail">
            <summary>
            Gets the thumbnail ID of the object.
            </summary>
        </member>
        <member name="M:IdleOfTheAgesLib.Models.ModJsonData.ThumbnailDataElement.#ctor(System.String,System.String,System.String,System.String,IdleOfTheAgesLib.Models.ModJsonData.SortingOrderData,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IdleOfTheAgesLib.Models.ModJsonData.ThumbnailDataElement"/> class.
            </summary>
            <param name="namespace">The namespace of the element.</param>
            <param name="id">The ID of the element.</param>
            <param name="name">The name of the element.</param>
            <param name="translationKey">The translation key of the element.</param>
            <param name="sortingOrder">The sorting order of the element.</param>
            <param name="thumbnail">The thumbnail for the element.</param>
        </member>
        <member name="T:IdleOfTheAgesLib.Models.ModJsonData.ItemData">
            <summary>
            An item that can be obtained in the game.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Models.ModJsonData.ItemData.DescriptionKey">
            <summary>
            Gets the key to the description of the item.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Models.ModJsonData.ItemData.SellPrice">
            <summary>
            Gets the sell price of this item.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Models.ModJsonData.ItemData.Metadata">
            <summary>
            Gets metadata for this item.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Models.ModJsonData.ItemData.Category">
            <summary>
            Gets the category of this item.
            <para>This is used for searching.</para>
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Models.ModJsonData.ItemData.Type">
            <summary>
            Gets the type of item this is.
            <para>This is used for searching.</para>
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Models.ModJsonData.ItemData.RequiredForCompletion">
            <summary>
            Gets a value indicating whether whether this item is required for completing the game.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Models.ModJsonData.ItemData.Tag">
            <summary>
            Gets the item's tag. This indicates what type of item it is and is used for things such as storage and equipping.
            </summary>
        </member>
        <member name="M:IdleOfTheAgesLib.Models.ModJsonData.ItemData.#ctor(System.String,System.String,System.String,System.String,IdleOfTheAgesLib.Models.ModJsonData.SortingOrderData,System.String,System.String,System.Int32,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.String,System.String,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IdleOfTheAgesLib.Models.ModJsonData.ItemData"/> class.
            </summary>
            <param name="namespace">The namespace of the element.</param>
            <param name="id">The ID of the element.</param>
            <param name="name">The name of the element.</param>
            <param name="translationKey">The translation key of the element.</param>
            <param name="sortingOrder">The sorting order of the element.</param>
            <param name="thumbnail">The thumbnail for the element.</param>
            <param name="descriptionKey">The description key of the item.</param>
            <param name="sellPrice">The sell price of the item.</param>
            <param name="metadata">The metadata of the item.</param>
            <param name="category">The category of the item.</param>
            <param name="type">The type of the item.</param>
            <param name="requiredForCompletion">Whether or not the item is required to consider the game "completed".</param>
            <param name="tag">The tags of the item.</param>
        </member>
        <member name="T:IdleOfTheAgesLib.Models.ModJsonData.LootEntry">
            <summary>
            Represents a loot entry within a loot table.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Models.ModJsonData.LootEntry.ItemID">
            <summary>
            Gets the item this entry is representing.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Models.ModJsonData.LootEntry.Guaranteed">
            <summary>
            Gets a value indicating whether this entry is a guaranteed drop when checking this loot table.
            <para>If this is <see langword="true"/>, <see cref="P:IdleOfTheAgesLib.Models.ModJsonData.LootEntry.Weight"/> and <see cref="P:IdleOfTheAgesLib.Models.ModJsonData.LootEntry.Percentage"/> are ignored and this entry doesn't impact the other entries.</para>
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Models.ModJsonData.LootEntry.BaseAmount">
            <summary>
            Gets the base amount of items to drop when rolling this entry.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Models.ModJsonData.LootEntry.Weight">
            <summary>
            Gets the weight for this entry.
            <para>Only 1 entry within a <see cref="T:IdleOfTheAgesLib.Models.ModJsonData.LootTable"/> that have weights can drop.</para>
            <para>If this entry can drop regardless of other drops, use <see cref="P:IdleOfTheAgesLib.Models.ModJsonData.LootEntry.Percentage"/> instead.</para>
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Models.ModJsonData.LootEntry.Percentage">
            <summary>
            Gets the percentage chance for this entry to drop.
            <para>All entries with a set percentage within a <see cref="T:IdleOfTheAgesLib.Models.ModJsonData.LootTable"/> can potentially drop independently from eachother and entries that have a <see cref="P:IdleOfTheAgesLib.Models.ModJsonData.LootEntry.Weight"/>.</para>
            <para>If this entry is part of a set of which only 1 can drop, use <see cref="P:IdleOfTheAgesLib.Models.ModJsonData.LootEntry.Weight"/> instead.</para>
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Models.ModJsonData.LootEntry.Action">
            <summary>
            Gets the action that should be performed on the loot entry. This value defaults to "add".
            <list type="bullet">
            <item>add: Adds the entry to the loot table</item>
            <item>remove: Removes the entry from the loot table</item>
            <item>update: Updates the entry within the loot table</item>
            </list>
            </summary>
        </member>
        <member name="M:IdleOfTheAgesLib.Models.ModJsonData.LootEntry.#ctor(System.String,System.Boolean,System.Int32,System.Nullable{System.Single},System.Nullable{System.Single},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IdleOfTheAgesLib.Models.ModJsonData.LootEntry"/> class.
            </summary>
            <param name="itemID">The ID of the item this entry should drop.</param>
            <param name="guaranteed">Whether the item is a guaranteed drop.</param>
            <param name="baseAmount">The base amount of the item to drop.</param>
            <param name="weight">The weigth of the drop.</param>
            <param name="percentage">The percentage chance this item drops.</param>
            <param name="action">The action that should be applied.</param>
        </member>
        <member name="T:IdleOfTheAgesLib.Models.ModJsonData.LootTable">
            <summary>
            Represents a loot table to get loot drops from.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Models.ModJsonData.LootTable.TargetType">
            <summary>
            Gets the type of thing this table is targeting.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Models.ModJsonData.LootTable.TargetID">
            <summary>
            Gets the ID of the thing this table is targeting.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Models.ModJsonData.LootTable.LootEntries">
            <summary>
            Gets the possible loot that can be obtained.
            </summary>
        </member>
        <member name="M:IdleOfTheAgesLib.Models.ModJsonData.LootTable.#ctor(IdleOfTheAgesLib.Models.ModJsonData.TargetType,System.String,System.Collections.Generic.IReadOnlyList{IdleOfTheAgesLib.Models.ModJsonData.LootEntry})">
            <summary>
            Initializes a new instance of the <see cref="T:IdleOfTheAgesLib.Models.ModJsonData.LootTable"/> class.
            </summary>
            <param name="targetType">The type of thing this table is targeting.</param>
            <param name="targetID">The ID of the thing to target.</param>
            <param name="lootEntries">The entires that can be obtained.</param>
        </member>
        <member name="T:IdleOfTheAgesLib.Models.ModJsonData.PageData">
            <summary>
            Represents a page in the <see cref="T:IdleOfTheAgesLib.Models.ModJsonData.PageGroupData"/>.
            </summary>
        </member>
        <member name="T:IdleOfTheAgesLib.Models.ModJsonData.PageData.PageTypeValues">
            <summary>
            The type of pages available.
            </summary>
        </member>
        <member name="F:IdleOfTheAgesLib.Models.ModJsonData.PageData.PageTypeValues.None">
            <summary>
            Default value.
            </summary>
        </member>
        <member name="F:IdleOfTheAgesLib.Models.ModJsonData.PageData.PageTypeValues.Skill">
            <summary>
            The page goes to a skill.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Models.ModJsonData.PageData.PageType">
            <summary>
            Gets the type of page this is.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Models.ModJsonData.PageData.TargetID">
            <summary>
            Gets the ID of the target behind the page.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Models.ModJsonData.PageData.PageGroup">
            <summary>
            Gets the ID of the page group this page belongs to.
            </summary>
        </member>
        <member name="M:IdleOfTheAgesLib.Models.ModJsonData.PageData.#ctor(System.String,System.String,System.String,System.String,IdleOfTheAgesLib.Models.ModJsonData.SortingOrderData,System.String,IdleOfTheAgesLib.Models.ModJsonData.PageData.PageTypeValues,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IdleOfTheAgesLib.Models.ModJsonData.PageData"/> class.
            </summary>
            <param name="namespace">The namespace of the element.</param>
            <param name="id">The ID of the element.</param>
            <param name="name">The name of the element.</param>
            <param name="translationKey">The translation key of the element.</param>
            <param name="sortingOrder">The sorting order of the element.</param>
            <param name="thumbnail">The thumbnail for the element.</param>
            <param name="pageType">The type of page this is.</param>
            <param name="targetID">The ID of the target behind the page.</param>
            <param name="pageGroup">The Id of the page group this page belongs to.</param>
        </member>
        <member name="T:IdleOfTheAgesLib.Models.ModJsonData.PageGroupData">
            <summary>
            Data for page groups in the sidebar.
            </summary>
        </member>
        <member name="M:IdleOfTheAgesLib.Models.ModJsonData.PageGroupData.#ctor(System.String,System.String,System.String,System.String,IdleOfTheAgesLib.Models.ModJsonData.SortingOrderData)">
            <summary>
            Initializes a new instance of the <see cref="T:IdleOfTheAgesLib.Models.ModJsonData.PageGroupData"/> class.
            </summary>
            <param name="namespace">The namespace of the element.</param>
            <param name="id">The ID of the element.</param>
            <param name="name">The name of the element.</param>
            <param name="translationKey">The translation key of the element.</param>
            <param name="sortingOrder">The sorting order of the element.</param>
        </member>
        <member name="T:IdleOfTheAgesLib.Models.ModJsonData.SkillCategoryData">
            <summary>
            A category a skill can be a part of.
            </summary>
        </member>
        <member name="M:IdleOfTheAgesLib.Models.ModJsonData.SkillCategoryData.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IdleOfTheAgesLib.Models.ModJsonData.SkillCategoryData"/> class.
            </summary>
            <param name="namespace">The namespace of the element.</param>
            <param name="id">The ID of the element.</param>
            <param name="name">The name of the element.</param>
        </member>
        <member name="T:IdleOfTheAgesLib.Models.ModJsonData.SkillData">
            <summary>
            Represents the data for a skill that is being added.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Models.ModJsonData.SkillData.SkillCategory">
            <summary>
            Gets the skill category this Skill falls under.
            </summary>
        </member>
        <member name="M:IdleOfTheAgesLib.Models.ModJsonData.SkillData.#ctor(System.String,System.String,System.String,System.String,IdleOfTheAgesLib.Models.ModJsonData.SortingOrderData,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IdleOfTheAgesLib.Models.ModJsonData.SkillData"/> class.
            </summary>
            <param name="namespace">The namespace of the element.</param>
            <param name="id">The ID of the element.</param>
            <param name="name">The name of the element.</param>
            <param name="translationKey">The translation key of the element.</param>
            <param name="sortingOrder">The sorting order of the element.</param>
            <param name="thumbnail">The thumbnail for the element.</param>
            <param name="skillCategory">The skill category this skill falls under.</param>
        </member>
        <member name="T:IdleOfTheAgesLib.Models.ModJsonData.SortingOrderData">
            <summary>
            Allows for sorting elements in different ways.
            <para>Elements that use <see cref="P:IdleOfTheAgesLib.Models.ModJsonData.SortingOrderData.After"/> are considered as having the same <see cref="P:IdleOfTheAgesLib.Models.ModJsonData.SortingOrderData.Order"/> as the element they are referring.</para>
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Models.ModJsonData.SortingOrderData.After">
            <summary>
            Gets the element that should precede this element.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Models.ModJsonData.SortingOrderData.Order">
            <summary>
            Gets a numeric value of where this element should be sorted.
            </summary>
        </member>
        <member name="M:IdleOfTheAgesLib.Models.ModJsonData.SortingOrderData.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IdleOfTheAgesLib.Models.ModJsonData.SortingOrderData"/> class.
            </summary>
            <param name="after">The lement that should precede this element.</param>
            <param name="order">The numeric value of where this element should be stored.</param>
        </member>
        <member name="T:IdleOfTheAgesLib.Models.ModJsonData.TargetType">
            <summary>
            Represents a type something can target.
            </summary>
        </member>
        <member name="F:IdleOfTheAgesLib.Models.ModJsonData.TargetType.Skill">
            <summary>
            Indicates a <see cref="T:IdleOfTheAgesLib.Models.ModJsonData.SkillData"/> is being targeted.
            </summary>
        </member>
        <member name="F:IdleOfTheAgesLib.Models.ModJsonData.TargetType.Action">
            <summary>
            Indicates an <see cref="T:IdleOfTheAgesLib.Models.ModJsonData.ActionData"/> is being targeted.
            </summary>
        </member>
        <member name="T:IdleOfTheAgesLib.Models.ResultBuilder">
            <summary>
            A helper class to build a <see cref="T:IdleOfTheAgesLib.Result"/> or <see cref="T:IdleOfTheAgesLib.Result`1"/> object.
            </summary>
        </member>
        <member name="M:IdleOfTheAgesLib.Models.ResultBuilder.AddError(IdleOfTheAgesLib.Models.Error)">
            <summary>
            Adds an error to the builder.
            </summary>
            <param name="error">The error to add.</param>
        </member>
        <member name="M:IdleOfTheAgesLib.Models.ResultBuilder.AddResult(IdleOfTheAgesLib.Result)">
            <summary>
            Adds the errors of a <see cref="T:IdleOfTheAgesLib.Result"/> object to this result.
            </summary>
            <param name="result">The result to incorporate.</param>
        </member>
        <member name="M:IdleOfTheAgesLib.Models.ResultBuilder.AddResult``1(IdleOfTheAgesLib.Result{``0})">
            <summary>
            Adds the errors of a <see cref="T:IdleOfTheAgesLib.Result`1"/> object to this result.
            </summary>
            <typeparam name="T">The type the result object stores.</typeparam>
            <param name="result">The <see cref="T:IdleOfTheAgesLib.Result`1"/> to incorporate.</param>
        </member>
        <member name="M:IdleOfTheAgesLib.Models.ResultBuilder.Build">
            <summary>
            Builds the result object.
            </summary>
            <returns>The created Result object.</returns>
        </member>
        <member name="M:IdleOfTheAgesLib.Models.ResultBuilder.Build``1(``0)">
            <summary>
            Builds the result object.
            </summary>
            <typeparam name="T">The type of the object returned by the function.</typeparam>
            <param name="result">The result of the operation.</param>
            <returns>The created Result object.</returns>
        </member>
        <member name="M:IdleOfTheAgesLib.Models.ResultBuilder.Build(System.Boolean)">
            <summary>
            Builds the result object.
            </summary>
            <param name="result">Whether the operation succeeded.</param>
            <returns>The created Result object.</returns>
        </member>
        <member name="T:IdleOfTheAgesLib.Models.Targets.ITarget">
            <summary>
            Represents an interface that can be used to target a certain thing, such as actions, skills, or skill categories.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Models.Targets.ITarget.Parent">
            <summary>
            Gets the parent target type that this falls under.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Models.Targets.ITarget.ID">
            <summary>
            Gets the ID of what is being targeted.
            </summary>
        </member>
        <member name="T:IdleOfTheAgesLib.Models.Targets.SkillCategoryTarget">
            <summary>
            Indicates that something is targeting a <see cref="T:IdleOfTheAgesLib.Models.ModJsonData.SkillCategoryData"/>.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Models.Targets.SkillCategoryTarget.Parent">
            <inheritdoc/>
        </member>
        <member name="P:IdleOfTheAgesLib.Models.Targets.SkillCategoryTarget.ID">
            <inheritdoc/>
        </member>
        <member name="M:IdleOfTheAgesLib.Models.Targets.SkillCategoryTarget.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IdleOfTheAgesLib.Models.Targets.SkillCategoryTarget"/> class.
            </summary>
            <param name="id">The ID of the <see cref="T:IdleOfTheAgesLib.Models.ModJsonData.SkillCategoryData"/> that is being targeted.</param>
        </member>
        <member name="T:IdleOfTheAgesLib.Models.Targets.SkillTarget">
            <summary>
            Indicates that something is targeting a <see cref="T:IdleOfTheAgesLib.Models.ModJsonData.SkillData"/>.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Models.Targets.SkillTarget.Parent">
            <inheritdoc/>
        </member>
        <member name="P:IdleOfTheAgesLib.Models.Targets.SkillTarget.ID">
            <inheritdoc/>
        </member>
        <member name="M:IdleOfTheAgesLib.Models.Targets.SkillTarget.#ctor(IdleOfTheAgesLib.Models.Targets.SkillCategoryTarget,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IdleOfTheAgesLib.Models.Targets.SkillTarget"/> class.
            </summary>
            <param name="parent">The skill category this skill is a part of.</param>
            <param name="id">The ID of the <see cref="T:IdleOfTheAgesLib.Models.ModJsonData.SkillData"/> that is being targeted.</param>
        </member>
        <member name="T:IdleOfTheAgesLib.Data.ModManifest">
            <summary>
            The data object of a mod's manifest.json.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Data.ModManifest.Namespace">
            <summary>
            Gets the namespace of a mod.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Data.ModManifest.Thumbnail">
            <summary>
            Gets the path to the mod's thumbnail.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Data.ModManifest.ModClass">
            <summary>
            Gets the name of the mod class.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Data.ModManifest.Dependencies">
            <summary>
            Gets the dependencies of this mod.
            </summary>
        </member>
        <member name="T:IdleOfTheAgesLib.Result">
            <summary>
            A result object that can be returned with information.
            </summary>
        </member>
        <member name="M:IdleOfTheAgesLib.Result.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:IdleOfTheAgesLib.Result"/> class.
            </summary>
            <param name="value">Whether or not the call was a success.</param>
        </member>
        <member name="M:IdleOfTheAgesLib.Result.#ctor(System.Boolean,System.Collections.Generic.IEnumerable{IdleOfTheAgesLib.Models.Error})">
            <summary>
            Initializes a new instance of the <see cref="T:IdleOfTheAgesLib.Result"/> class.
            </summary>
            <param name="value">Whether or not the call was a success.</param>
            <param name="errors">The errors that occured.</param>
        </member>
        <member name="M:IdleOfTheAgesLib.Result.op_Implicit(IdleOfTheAgesLib.Result)~System.Boolean">
            <summary>
            Implicitly casts a <see cref="T:IdleOfTheAgesLib.Result"/> object to a <see cref="T:System.Boolean"/>.
            </summary>
            <param name="result">The result object to cast.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the <paramref name="result"/> object is <see langword="null"/>.</exception>
        </member>
        <member name="M:IdleOfTheAgesLib.Result.op_Implicit(System.Boolean)~IdleOfTheAgesLib.Result">
            <summary>
            Implicitly casts a <see cref="T:System.Boolean"/> value to a <see cref="T:IdleOfTheAgesLib.Result"/>.
            </summary>
            <param name="value">The bool value to cast.</param>
        </member>
        <member name="M:IdleOfTheAgesLib.Result.op_Implicit(System.ValueTuple{System.Boolean,System.String})~IdleOfTheAgesLib.Result">
            <summary>
            Implicitly casts a <see cref="T:System.Tuple`2"/> of a <see cref="T:System.Boolean"/> value and a <see cref="T:System.String"/> value to a <see cref="T:IdleOfTheAgesLib.Result"/> value.
            </summary>
            <param name="value">The tuple object to cast.</param>
        </member>
        <member name="M:IdleOfTheAgesLib.Result.op_Implicit(System.ValueTuple{System.Boolean,System.Collections.Generic.IEnumerable{IdleOfTheAgesLib.Models.Error}})~IdleOfTheAgesLib.Result">
            <summary>
            Implicitly casts a <see cref="T:System.Tuple`2"/> of a <see cref="T:System.Boolean"/> value and a <see cref="T:System.Collections.Generic.IEnumerable`1"/> or <see cref="T:IdleOfTheAgesLib.Models.Error"/> value to a <see cref="T:IdleOfTheAgesLib.Result"/> value.
            </summary>
            <param name="value">The tuple object to cast.</param>
        </member>
        <member name="M:IdleOfTheAgesLib.Result.op_Implicit(System.ValueTuple{System.Boolean,System.String,System.Exception})~IdleOfTheAgesLib.Result">
            <summary>
            Implicitly casts a <see cref="T:System.Tuple`3"/> of a <see cref="T:System.Boolean"/> value, a <see cref="T:System.String"/> value, and an <see cref="T:System.Exception"/> object to a <see cref="T:IdleOfTheAgesLib.Result`1"/>.
            </summary>
            <param name="value">The tuple object to cast.</param>
        </member>
        <member name="T:IdleOfTheAgesLib.Result`1">
            <summary>
            A result object that can be returned with information.
            </summary>
            <typeparam name="T">The type of the object that is encased in this object.</typeparam>
            <remarks>
            Initializes a new instance of the <see cref="T:IdleOfTheAgesLib.Result`1"/> class.
            </remarks>
        </member>
        <member name="P:IdleOfTheAgesLib.Result`1.Value">
            <summary>
            Gets the target object.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Result`1.Errors">
            <summary>
            Gets the errors that occured (if any).
            </summary>
        </member>
        <member name="M:IdleOfTheAgesLib.Result`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:IdleOfTheAgesLib.Result`1"/> class.
            </summary>
            <param name="value">The target object.</param>
        </member>
        <member name="M:IdleOfTheAgesLib.Result`1.#ctor(`0,System.Collections.Generic.IEnumerable{IdleOfTheAgesLib.Models.Error})">
            <summary>
            Initializes a new instance of the <see cref="T:IdleOfTheAgesLib.Result`1"/> class.
            </summary>
            <param name="value">The target object.</param>
            <param name="errors">The errors that occured.</param>
        </member>
        <member name="M:IdleOfTheAgesLib.Result`1.ThrowIfInvalid">
            <summary>
            Throws an exception if the <see cref="T:IdleOfTheAgesLib.Result`1"/> object is in an invalid state.
            </summary>
            <exception cref="T:System.Exception">Thrown if the object is not in a valid state and no exception was provided.</exception>
        </member>
        <member name="M:IdleOfTheAgesLib.Result`1.Print(IdleOfTheAgesLib.ILogger)">
            <summary>
            Prints the resulting object to a target.
            </summary>
            <param name="logger">The logger to print to.</param>
        </member>
        <member name="M:IdleOfTheAgesLib.Result`1.op_Implicit(IdleOfTheAgesLib.Result{`0})~System.Boolean">
            <summary>
            Implicitly casts a <see cref="T:IdleOfTheAgesLib.Result`1"/> object to a bool.
            <para>This returns <see langword="true"/> if the call was successful, and <see langword="false"/> if something went wrong.</para>
            </summary>
            <param name="result">The result object to cast.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the <paramref name="result"/> object is <see langword="null"/>.</exception>
        </member>
        <member name="M:IdleOfTheAgesLib.Result`1.op_Implicit(IdleOfTheAgesLib.Result{`0})~`0">
            <summary>
            Implicitly casts a <see cref="T:IdleOfTheAgesLib.Result`1"/> object to a <typeparamref name="T"/>.
            </summary>
            <param name="result">The result object to cast.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the <paramref name="result"/> object is <see langword="null"/>.</exception>
            <exception cref="T:System.Exception">Thrown if the <see cref="T:System.Exception"/> is not <see langword="null"/>.</exception>
        </member>
        <member name="M:IdleOfTheAgesLib.Result`1.op_Implicit(`0)~IdleOfTheAgesLib.Result{`0}">
            <summary>
            Implicitly casts a <typeparamref name="T"/> value to a <see cref="T:IdleOfTheAgesLib.Result`1"/>.
            </summary>
            <param name="value">The bool value to cast.</param>
        </member>
        <member name="M:IdleOfTheAgesLib.Result`1.op_Implicit(System.ValueTuple{`0,System.String})~IdleOfTheAgesLib.Result{`0}">
            <summary>
            Implicitly casts a <see cref="T:System.Tuple`2"/> of a <typeparamref name="T"/> value and a <see cref="T:System.String"/> value to a <see cref="T:IdleOfTheAgesLib.Result`1"/>.
            </summary>
            <param name="value">The tuple object to cast.</param>
        </member>
        <member name="M:IdleOfTheAgesLib.Result`1.op_Implicit(System.ValueTuple{`0,System.Collections.Generic.IEnumerable{IdleOfTheAgesLib.Models.Error}})~IdleOfTheAgesLib.Result{`0}">
            <summary>
            Implicitly casts a <see cref="T:System.Tuple`2"/> of a <typeparamref name="T"/> value and a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of type <see cref="T:IdleOfTheAgesLib.Models.Error"/> value to a <see cref="T:IdleOfTheAgesLib.Result`1"/> value.
            </summary>
            <param name="value">The tuple to cast.</param>
        </member>
        <member name="M:IdleOfTheAgesLib.Result`1.op_Implicit(System.ValueTuple{`0,System.String,System.Collections.Generic.IEnumerable{IdleOfTheAgesLib.Models.Error}})~IdleOfTheAgesLib.Result{`0}">
            <summary>
            Implicitly casts a <see cref="T:System.Tuple`3"/> of a <typeparamref name="T"/> value, a <see cref="T:System.String"/> value, and a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of type <see cref="T:IdleOfTheAgesLib.Models.Error"/> value to a <see cref="T:IdleOfTheAgesLib.Result`1"/> value.
            </summary>
            <param name="value">The tuple to cast.</param>
        </member>
        <member name="M:IdleOfTheAgesLib.Result`1.op_Implicit(System.ValueTuple{`0,System.String,System.Exception})~IdleOfTheAgesLib.Result{`0}">
            <summary>
            Implicitly casts a <see cref="T:System.Tuple`3"/> of a <typeparamref name="T"/> value, a <see cref="T:System.String"/> value, and an <see cref="T:System.Exception"/> object to a <see cref="T:IdleOfTheAgesLib.Result`1"/>.
            </summary>
            <param name="value">The tuple object to cast.</param>
        </member>
        <member name="T:IdleOfTheAgesLib.IDataLoader">
            <summary>
            Allows for loading in <see cref="T:IdleOfTheAgesLib.Models.ModData"/> objects.
            </summary>
        </member>
        <member name="M:IdleOfTheAgesLib.IDataLoader.LoadData(IdleOfTheAgesLib.IModObject)">
            <summary>
            Loads in the files in the mod's 'data' folder.
            </summary>
            <param name="mod">The mod to load the data in for..</param>
            <returns><see langword="true"/> if the data was successfully loaded..</returns>
        </member>
        <member name="T:IdleOfTheAgesLib.ILootLibrary">
            <summary>
            A library containing all <see cref="T:IdleOfTheAgesLib.Models.ModJsonData.LootTable"/>s.
            </summary>
        </member>
        <member name="M:IdleOfTheAgesLib.ILootLibrary.RegisterLootTable(IdleOfTheAgesLib.Models.ModJsonData.LootTable)">
            <summary>
            Registers a <see cref="T:IdleOfTheAgesLib.Models.ModJsonData.LootTable"/>.
            </summary>
            <param name="lootTable">The <see cref="T:IdleOfTheAgesLib.Models.ModJsonData.LootTable"/> to register.</param>
            <returns>Whether the table was successfully added.</returns>
        </member>
        <member name="M:IdleOfTheAgesLib.ILootLibrary.GetLootTable(System.String)">
            <summary>
            Gets a <see cref="T:IdleOfTheAgesLib.Models.ModJsonData.LootTable"/> for a specific target.
            </summary>
            <param name="target">The target to get the <see cref="T:IdleOfTheAgesLib.Models.ModJsonData.LootTable"/> for.</param>
            <returns>Returns the requested <see cref="T:IdleOfTheAgesLib.Models.ModJsonData.LootTable"/>.</returns>
        </member>
        <member name="T:IdleOfTheAgesLib.IModLibrary">
            <summary>
            Contains all mods that have been loaded.
            </summary>
        </member>
        <member name="M:IdleOfTheAgesLib.IModLibrary.RegisterMod(System.String,IdleOfTheAgesLib.IModObject)">
            <summary>
            Registers a mod to the mod library.
            </summary>
            <param name="namespace">The namespace of the mod.</param>
            <param name="modObject">The mod object.</param>
            <returns>A <see cref="T:IdleOfTheAgesLib.Result"/> object to check if the call was successful.</returns>
        </member>
        <member name="M:IdleOfTheAgesLib.IModLibrary.ModExists(System.String)">
            <summary>
            Checks whether a mod with the specified <paramref name="namespace"/> exists.
            </summary>
            <param name="namespace">The namespace to check for.</param>
            <returns>A <see cref="T:IdleOfTheAgesLib.Result"/> object to check if the call was successful.</returns>
        </member>
        <member name="M:IdleOfTheAgesLib.IModLibrary.GetModObject(System.String)">
            <summary>
            Gets the mod object of a mod.
            </summary>
            <param name="namespace">The namespace of the mod to get the mod object for.</param>
            <returns>The requested mod object.</returns>
        </member>
        <member name="M:IdleOfTheAgesLib.IModLibrary.GetAllMods">
            <summary>
            Gets all the mods that are currently registered.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> with all the currently registered mods.</returns>
        </member>
        <member name="T:IdleOfTheAgesLib.Services.IPageService">
            <summary>
            A service for containing all the pages the game can show.
            </summary>
        </member>
        <member name="M:IdleOfTheAgesLib.Services.IPageService.AddPageGroup(IdleOfTheAgesLib.Models.ModJsonData.PageGroupData)">
            <summary>
            Adds a page group.
            </summary>
            <param name="pageGroup">The page group to add.</param>
            <returns><see langword="true"/> if the page group was succesfully added. <see langword="false"/> if not.</returns>
        </member>
        <member name="M:IdleOfTheAgesLib.Services.IPageService.AddPage(System.String,IdleOfTheAgesLib.Models.ModJsonData.PageData)">
            <summary>
            Adds a page to a page group.
            </summary>
            <param name="pageGroup">The page group to add the page to.</param>
            <param name="page">The page to add.</param>
            <returns><see langword="true"/> if the page group was succesfully added. <see langword="false"/> if not.</returns>
        </member>
        <member name="M:IdleOfTheAgesLib.Services.IPageService.GetPageGroup(System.String)">
            <summary>
            Gets the data for a page group.
            </summary>
            <param name="pageGroup">The page group to get the data for.</param>
            <returns>The page group data.</returns>
        </member>
        <member name="M:IdleOfTheAgesLib.Services.IPageService.GetAllPageGroups">
            <summary>
            Gets all page groups that have been registered.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> with all page groups.</returns>
        </member>
        <member name="M:IdleOfTheAgesLib.Services.IPageService.GetPage(System.String,System.String)">
            <summary>
            Gets the data for a page.
            </summary>
            <param name="pageGroup">The page group the page is in.</param>
            <param name="page">The page to get the data for.</param>
            <returns>The page data.</returns>
        </member>
        <member name="M:IdleOfTheAgesLib.Services.IPageService.GetPagesInGroup(System.String)">
            <summary>
            Gets all pages that have been registered in a page group.
            </summary>
            <param name="pageGroup">The page group to get the pages for.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> with all pages in the page group.</returns>
        </member>
        <member name="T:IdleOfTheAgesLib.Skills.IActionLibrary">
            <summary>
            A library to hold the actions available.
            </summary>
        </member>
        <member name="M:IdleOfTheAgesLib.Skills.IActionLibrary.GetAllActionsForSkill(System.String)">
            <summary>
            Gets all the action elements for a specific skill.
            <para>The action elements are sorted based on their <see cref="P:IdleOfTheAgesLib.Models.ModJsonData.ActionElement.RequiredLevel"/> value, going from low to high.</para>
            </summary>
            <param name="skillID">The skill to get the action elements for.</param>
            <returns>The action elements that have been registered for the specific skill.</returns>
        </member>
        <member name="M:IdleOfTheAgesLib.Skills.IActionLibrary.RegisterAction(IdleOfTheAgesLib.Models.ModJsonData.ActionData)">
            <summary>
            Registers actions to the library.
            </summary>
            <param name="action">The action to register.</param>
            <returns>Returns whether the action was successfully added.</returns>
        </member>
        <member name="T:IdleOfTheAgesLib.Skills.ISkillService">
            <summary>
            A service that keeps track of all available skills.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Skills.ISkillService.CurrentlyShowingSkill">
            <summary>
            Gets the skill that should be shown.
            </summary>
        </member>
        <member name="E:IdleOfTheAgesLib.Skills.ISkillService.CurrentlyShowingSkillChangedEvent">
            <summary>
            An event that is fired when the currently showing skill changes.
            </summary>
        </member>
        <member name="M:IdleOfTheAgesLib.Skills.ISkillService.RegisterSkillData(IdleOfTheAgesLib.Models.ModJsonData.SkillData)">
            <summary>
            Registers the skill data for a skill to the game.
            </summary>
            <param name="skillData">The skill data to register.</param>
            <returns>A <see cref="T:IdleOfTheAgesLib.Result"/> object to check if the call was successful.</returns>
        </member>
        <member name="M:IdleOfTheAgesLib.Skills.ISkillService.RegisterSkillImplementation``1(System.String)">
            <summary>
            Registers the implementation for a skill to the game.
            </summary>
            <typeparam name="TSkill">The type of the skill to register.</typeparam>
            <param name="skillID">The ID of the skill.</param>
            <returns>A <see cref="T:IdleOfTheAgesLib.Result"/> object to check if the call was successful.</returns>
        </member>
        <member name="M:IdleOfTheAgesLib.Skills.ISkillService.RegisterSkillImplementation(System.Type,System.String)">
            <summary>
            Registers the implementation for a skill to the game.
            </summary>
            <param name="skillType">The type of the skill to register.</param>
            <param name="skillID">The ID of the skill.</param>
            <returns>A <see cref="T:IdleOfTheAgesLib.Result"/> object to check if the call was successful.</returns>
        </member>
        <member name="M:IdleOfTheAgesLib.Skills.ISkillService.GetSkill``1(System.String)">
            <summary>
            Gets a skill implementation.
            </summary>
            <typeparam name="TSkill">The type of the skill to get.</typeparam>
            <param name="skillID">The ID of the skill to get.</param>
            <returns>The requested skill.</returns>
        </member>
        <member name="M:IdleOfTheAgesLib.Skills.ISkillService.GetSkills">
            <summary>
            Gets all skills currently registered in the game.
            </summary>
            <returns>The skills currently registered in the game.</returns>
        </member>
        <member name="M:IdleOfTheAgesLib.Skills.ISkillService.ChangeShowingSkill(System.String)">
            <summary>
            Changes the skill that is being shown.
            </summary>
            <param name="skillID">The ID of the skill that should be shown.</param>
            <returns>A <see cref="T:IdleOfTheAgesLib.Result"/> object to check if the call was successful.</returns>
        </member>
        <member name="T:IdleOfTheAgesLib.Skills.ModifierCalculationType">
            <summary>
            An enum that is used to indicate what type of calculations should be done with percentage values to calculate the final modifier time.
            </summary>
        </member>
        <member name="F:IdleOfTheAgesLib.Skills.ModifierCalculationType.Additive">
            <summary>
            The percentages should be added together.
            </summary>
        </member>
        <member name="F:IdleOfTheAgesLib.Skills.ModifierCalculationType.Multiplicative">
            <summary>
            The percentages should be multiplied together.
            </summary>
        </member>
        <member name="T:IdleOfTheAgesLib.Skills.ModifierData">
            <summary>
            Data that modifies certain stats within the game.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Skills.ModifierData.ModifierSource">
            <summary>
            Gets the source of the modification data.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Skills.ModifierData.ModifierTarget">
            <summary>
            Gets the target stat this modifier is affecting.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Skills.ModifierData.FlatModifier">
            <summary>
            Gets or sets the flat modifier that should be applied.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Skills.ModifierData.PercentModifier">
            <summary>
            Gets or sets the percent modifier that shouldbe applied.
            </summary>
        </member>
        <member name="M:IdleOfTheAgesLib.Skills.ModifierData.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IdleOfTheAgesLib.Skills.ModifierData"/> class.
            </summary>
            <param name="modifierSource">The source of the modification data.</param>
            <param name="modifierTarget">The target stat this modifier is affecting.</param>
        </member>
        <member name="T:IdleOfTheAgesLib.Skills.ModifierOrder">
            <summary>
            An enum that is used to indicate in what order the modifiers should be applied.
            </summary>
        </member>
        <member name="F:IdleOfTheAgesLib.Skills.ModifierOrder.FlatFirst">
            <summary>
            The <see cref="P:IdleOfTheAgesLib.Skills.ModifierData.FlatModifier"/> should be applied first.
            </summary>
        </member>
        <member name="F:IdleOfTheAgesLib.Skills.ModifierOrder.PercentageFirst">
            <summary>
            The <see cref="P:IdleOfTheAgesLib.Skills.ModifierData.PercentModifier"/> should be applied first.
            </summary>
        </member>
        <member name="T:IdleOfTheAgesLib.Skills.SkillAttribute">
            <summary>
            Indicates that a class is a <see cref="T:IdleOfTheAgesLib.Skills.SkillImplementation"/>.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Skills.SkillAttribute.SkillID">
            <summary>
            Gets the ID of the skill this class is implementing.
            </summary>
        </member>
        <member name="M:IdleOfTheAgesLib.Skills.SkillAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IdleOfTheAgesLib.Skills.SkillAttribute"/> class.
            </summary>
            <param name="skillID">The ID of the skill.</param>
        </member>
        <member name="T:IdleOfTheAgesLib.Skills.SkillImplementation">
            <summary>
            A skill that can be practiced by the player.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Skills.SkillImplementation.Namespace">
            <summary>
            Gets the namespace the skill exists in.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Skills.SkillImplementation.SkillData">
            <summary>
            Gets the data for the skill.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Skills.SkillImplementation.CurrentSkillLevel">
            <summary>
            Gets or sets the current level of the skill.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Skills.SkillImplementation.MaxSkillLevel">
            <summary>
            Gets the maximum level of this skill.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Skills.SkillImplementation.NamespacedID">
            <summary>
            Gets the skill's namespaced ID.
            </summary>
        </member>
        <member name="M:IdleOfTheAgesLib.Skills.SkillImplementation.#ctor(IdleOfTheAgesLib.Models.ModJsonData.SkillData)">
            <summary>
            Initializes a new instance of the <see cref="T:IdleOfTheAgesLib.Skills.SkillImplementation"/> class.
            </summary>
            <param name="skillData">The json data for the skill.</param>
        </member>
        <member name="M:IdleOfTheAgesLib.Skills.SkillImplementation.Initialize(IdleOfTheAgesLib.DependencyInjection.IServiceLibrary)">
            <summary>
            Initializes the skill.
            </summary>
            <param name="serviceLibrary">The service library to obtain services from.</param>
        </member>
        <member name="T:IdleOfTheAgesLib.Statistics.IStatisticsService">
            <summary>
            A service to record statistics to.
            </summary>
        </member>
        <member name="M:IdleOfTheAgesLib.Statistics.IStatisticsService.Increment(System.String,System.Boolean)">
            <summary>
            Increments the numeric value behind the statistic.
            </summary>
            <param name="statistic">The statistic to increment.</param>
            <param name="createIfMissing">If <see langword="true"/>, creates an entry for the statistic if it hasn't been added yet.</param>
            <returns><see langword="true"/> if the statistic was succesfully incremented.</returns>
        </member>
        <member name="M:IdleOfTheAgesLib.Statistics.IStatisticsService.Decrement(System.String,System.Boolean)">
            <summary>
            Decrements the numeric value behind the statistic.
            </summary>
            <param name="statistic">The statistic to decrement.</param>
            <param name="createIfMissing">If <see langword="true"/>, creates an entry for the statistic if it hasn't been added yet.</param>
            <returns><see langword="true"/> if the statistic was succesfully decremented.</returns>
        </member>
        <member name="M:IdleOfTheAgesLib.Statistics.IStatisticsService.Add(System.String,System.Int32,System.Boolean)">
            <summary>
            Adds a numeric value of a statistic. If a negative value is given, it is decremented.
            </summary>
            <param name="statistic">The statistic to add the value to.</param>
            <param name="value">The value to add.</param>
            <param name="createIfMissing">If <see langword="true"/>, creates an entry for the statistic if it hasn't been added yet.</param>
            <returns><see langword="true"/> if the statistic was succesfully adjusted.</returns>
        </member>
        <member name="T:IdleOfTheAgesLib.Translation.ITranslationService">
            <summary>
            Allows for translation of text.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.Translation.ITranslationService.CurrentLanguage">
            <summary>
            Gets the currently selected language.
            </summary>
        </member>
        <member name="E:IdleOfTheAgesLib.Translation.ITranslationService.LanguageChangedEvent">
            <summary>
            An event that gets fired when the language is changed.
            </summary>
        </member>
        <member name="M:IdleOfTheAgesLib.Translation.ITranslationService.ChangeLanguage(System.String)">
            <summary>
            Changes the language of the game.
            </summary>
            <param name="language">The new game language.</param>
            <returns>A <see cref="T:IdleOfTheAgesLib.Result"/> object to check if the call was successful.</returns>
        </member>
        <member name="M:IdleOfTheAgesLib.Translation.ITranslationService.GetLanguageString(System.String)">
            <summary>
            Gets the language string for the given key.
            </summary>
            <param name="key">The key to translate.</param>
            <returns>The requested language string.</returns>
        </member>
        <member name="M:IdleOfTheAgesLib.Translation.ITranslationService.LoadLanguagePath(System.String,System.String)">
            <summary>
            Loads the path of the memory file for the language into memory so it can be read if the language is needed.
            </summary>
            <param name="language">The language the file is for.</param>
            <param name="path">The path to the file.</param>
            <returns>A <see cref="T:IdleOfTheAgesLib.Result"/> object to check if the call was successful.</returns>
        </member>
        <member name="T:IdleOfTheAgesLib.Translation.Languages">
            <summary>
            Contains the different languages that the game supports.
            </summary>
        </member>
        <member name="F:IdleOfTheAgesLib.Translation.Languages.EN_US">
            <summary>
            English American.
            </summary>
        </member>
        <member name="F:IdleOfTheAgesLib.Translation.Languages.NL_NL">
            <summary>
            Dutch.
            </summary>
        </member>
        <member name="M:IdleOfTheAgesLib.Translation.Languages.IsLanguageSupported(System.String)">
            <summary>
            Checks whether a language is supported by the game.
            </summary>
            <param name="language">The language to check for.</param>
            <returns><see langword="true"/> if the language is supported, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:IdleOfTheAgesLib.Translation.Languages.GetAllSupportedLanguages">
            <summary>
            Gets all languages supported by the game.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> with all languages the game supports.</returns>
        </member>
        <member name="T:IdleOfTheAgesLib.UI.Elements.ElementManager`1">
            <summary>
            The base class for UI elements.
            </summary>
            <typeparam name="T">The type of the element that is created.</typeparam>
        </member>
        <member name="P:IdleOfTheAgesLib.UI.Elements.ElementManager`1.Element">
            <summary>
            Gets the element that is being managed.
            </summary>
        </member>
        <member name="M:IdleOfTheAgesLib.UI.Elements.ElementManager`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IdleOfTheAgesLib.UI.Elements.ElementManager`1"/> class.
            </summary>
        </member>
        <member name="T:IdleOfTheAgesLib.UI.Elements.ElementManager">
            <summary>
            The base class for UI elements.
            </summary>
        </member>
        <member name="M:IdleOfTheAgesLib.UI.Elements.ElementManager.ConstructObject(IdleOfTheAgesLib.UI.Parsing.Trees.Node,IdleOfTheAgesLib.UI.Elements.UIContext)">
            <summary>
            Constructs a UI element based on the node.
            <para>If no element should be shown, <see langword="null"/> should be returned.</para>
            </summary>
            <param name="node">The node that contains data about the element.</param>
            <param name="context">The ui context to use while constructing the element.</param>
            <returns>The constructed UI element.</returns>
        </member>
        <member name="M:IdleOfTheAgesLib.UI.Elements.ElementManager.Initialize(IdleOfTheAgesLib.UI.Parsing.Trees.Node,IdleOfTheAgesLib.UI.Elements.UIContext)">
            <summary>
            Allows the element manager to initialize the context or element with relevant data.
            </summary>
            <param name="node">The node that contains data about the element.</param>
            <param name="context">The ui context to use while constructing the element.</param>
            <returns><see langword="true"/> if the initialisation was succesful, <see langword="false"/> if something went wrong.</returns>
        </member>
        <member name="M:IdleOfTheAgesLib.UI.Elements.ElementManager.Update(IdleOfTheAgesLib.UI.Elements.UIContext)">
            <summary>
            Updates the element to ensure the view changes when the state of the game changes.
            </summary>
            <param name="context">The ui context to use while updating the element.</param>
            <returns><see langword="true"/> if the object was succesfully updated, <see langword="false"/> if something went wrong.</returns>
        </member>
        <member name="T:IdleOfTheAgesLib.UI.Elements.ElementManagerAttribute">
            <summary>
            An <see cref="T:System.Attribute"/> used to indicate that a class can create UI elements.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.UI.Elements.ElementManagerAttribute.HtmlTag">
            <summary>
            Gets the tag the class is meant to construct elements for.
            </summary>
        </member>
        <member name="M:IdleOfTheAgesLib.UI.Elements.ElementManagerAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IdleOfTheAgesLib.UI.Elements.ElementManagerAttribute"/> class.
            </summary>
            <param name="htmlTag">The html tag the elements constructs for.</param>
        </member>
        <member name="T:IdleOfTheAgesLib.UI.Elements.ModelBase">
            <summary>
            A base class for UI models.
            </summary>
        </member>
        <member name="T:IdleOfTheAgesLib.UI.Elements.UIContext">
            <summary>
            Contains the UI context for creating UI elements from the parsed HTML.
            </summary>
        </member>
        <member name="M:IdleOfTheAgesLib.UI.Elements.UIContext.AddContext(System.String,System.Object,System.Boolean)">
            <summary>
            Adds a context.
            </summary>
            <param name="key">The key of the context.</param>
            <param name="context">The context to add.</param>
            <param name="overwriteIfExists">If <see langword="true"/>, overwrites existing contexts with the same key.</param>
            <returns>Whether the context was succesfully added.</returns>
        </member>
        <member name="M:IdleOfTheAgesLib.UI.Elements.UIContext.GetContext(System.String)">
            <summary>
            Gets the context stored at the provided key.
            </summary>
            <param name="key">The key of the context to get.</param>
            <returns>The requested context.</returns>
        </member>
        <member name="M:IdleOfTheAgesLib.UI.Elements.UIContext.GetContext``1(System.String)">
            <summary>
            Gets the context stored at the provided key.
            </summary>
            <typeparam name="T">The type of the context to get.</typeparam>
            <param name="key">The key of the context to get.</param>
            <returns>The requested context.</returns>
        </member>
        <member name="M:IdleOfTheAgesLib.UI.Elements.UIContext.SetUIModel(System.Object,System.Boolean)">
            <summary>
            Sets the UI model to use.
            </summary>
            <param name="model">The ui model to use.</param>
            <param name="overwriteIfExists">Whether or not to overwrite an existing ui model if one is already present.</param>
            <returns><see langword="true"/> if the model has been updated, <see langword="false"/> if not.</returns>
        </member>
        <member name="M:IdleOfTheAgesLib.UI.Elements.UIContext.CallModelMethod(System.String)">
            <summary>
            Calls the provided method on the model.
            </summary>
            <param name="methodName">The name of the method to call.</param>
            <returns>The result of the method call.</returns>
        </member>
        <member name="T:IdleOfTheAgesLib.UI.IUIManager">
            <summary>
            The UI manager that manages the UI of the application and is responsible for adding new UI.
            <para>
            This interface should be implemented by the UI framework.
            </para>
            </summary>
        </member>
        <member name="M:IdleOfTheAgesLib.UI.IUIManager.AddUI(System.String,System.String)">
            <summary>
            Adds a piece of UI to the screen.
            </summary>
            <param name="uiID">The ID of the UI to add.</param>
            <param name="parentID">The ID of the parent node.</param>
            <returns>Returns whether the UI was succesfully added.</returns>
        </member>
        <member name="T:IdleOfTheAgesLib.UI.Parsing.IParserLibrary">
            <summary>
            A library that stores all the parsers available.
            </summary>
        </member>
        <member name="M:IdleOfTheAgesLib.UI.Parsing.IParserLibrary.GetElementManager(System.String)">
            <summary>
            Gets the parser for the specific tag.
            </summary>
            <param name="tag">The tag to get the parser for.</param>
            <returns>The requested parser.</returns>
        </member>
        <member name="M:IdleOfTheAgesLib.UI.Parsing.IParserLibrary.GetElementManager``1(System.String)">
            <summary>
            Gets the parser for the specific tag.
            </summary>
            <typeparam name="T">
            The type of UI element it should return.
            <para>
            This should only be used by the platform that also manages the UI.
            </para>
            </typeparam>
            <param name="tag">The tag to get the parser for.</param>
            <returns>The requested parser.</returns>
        </member>
        <member name="M:IdleOfTheAgesLib.UI.Parsing.IParserLibrary.GetUIModel(System.String)">
            <summary>
            Gets a UI model.
            </summary>
            <param name="modelName">The model to obtain.</param>
            <returns>The requested model.</returns>
        </member>
        <member name="M:IdleOfTheAgesLib.UI.Parsing.IParserLibrary.RegisterElementManager``1(System.String)">
            <summary>
            Registers a parser to the library.
            </summary>
            <typeparam name="T">The type of the parser.</typeparam>
            <param name="tag">The tag the parser should parse for.</param>
            <returns><see langword="true"/> if the parser was succesfully registered, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:IdleOfTheAgesLib.UI.Parsing.IParserLibrary.RegisterElementManager(System.Type,System.String)">
            <summary>
            Registers a parser to the library.
            </summary>
            <param name="parserType">The type of the parser.</param>
            <param name="tag">The tag the parser should parse for.</param>
            <returns><see langword="true"/> if the parser was succesfully registered, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:IdleOfTheAgesLib.UI.Parsing.IParserLibrary.RegisterUIModel``1(System.String)">
            <summary>
            Registers a UI model to the library.
            </summary>
            <typeparam name="T">The type of the UI model.</typeparam>
            <param name="modelName">The name of the UI model.</param>
            <returns><see langword="true"/> if the UI model was succesfully registered, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:IdleOfTheAgesLib.UI.Parsing.IParserLibrary.RegisterUIModel(System.Type,System.String)">
            <summary>
            Registers a UI model to the library.
            </summary>
            <param name="modelType">The type of the UI model.</param>
            <param name="modelName">The name of the UI model.</param>
            <returns><see langword="true"/> if the UI model was succesfully registered, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:IdleOfTheAgesLib.UI.Parsing.IParserService">
            <summary>
            A service that parses HTML files into trees that can be used to create the UI.
            </summary>
        </member>
        <member name="M:IdleOfTheAgesLib.UI.Parsing.IParserService.GetUI(System.String)">
            <summary>
            Gets the root <see cref="T:IdleOfTheAgesLib.UI.Parsing.Trees.Node"/> for building the UI for the provided ui element.
            </summary>
            <param name="uiName">The name of the UI to get.</param>
            <returns>The root <see cref="T:IdleOfTheAgesLib.UI.Parsing.Trees.Node"/> for the UI.</returns>
        </member>
        <member name="M:IdleOfTheAgesLib.UI.Parsing.IParserService.RegisterFile(System.String,System.String)">
            <summary>
            Registers UI files to the parser.
            </summary>
            <param name="uiName">The name of the UI.</param>
            <param name="file">The path to the file of the UI.</param>
            <returns>Whether the UI was succesfully registered.</returns>
        </member>
        <member name="T:IdleOfTheAgesLib.UI.Parsing.Models.ParseContext">
            <summary>
            Keeps track of data while parsing HTML.
            </summary>
        </member>
        <member name="M:IdleOfTheAgesLib.UI.Parsing.Models.ParseContext.AddData(System.String,System.Object,System.Boolean)">
            <summary>
            Adds data to the parsing that can be used elsewhere.
            </summary>
            <param name="key">The key of the context.</param>
            <param name="data">The data to keep.</param>
            <param name="overwriteExisting">If <see langword="true"/>, if the <paramref name="key"/> already exists, the data is overwritten.</param>
            <returns><see langword=""/> if the data was succesfully added.</returns>
        </member>
        <member name="M:IdleOfTheAgesLib.UI.Parsing.Models.ParseContext.GetData(System.String)">
            <summary>
            Gets data stored in the context.
            </summary>
            <param name="key">The key of the data to get.</param>
            <returns>The requested data.</returns>
        </member>
        <member name="M:IdleOfTheAgesLib.UI.Parsing.Models.ParseContext.GetData``1(System.String)">
            <summary>
            Gets data stored in the context.
            </summary>
            <typeparam name="T">The type of the data stored.</typeparam>
            <param name="key">The key of the data to get.</param>
            <returns>The requested data.</returns>
        </member>
        <member name="T:IdleOfTheAgesLib.UI.Parsing.Trees.Node">
            <summary>
            A node that contains information about a HTML tag for the UI.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.UI.Parsing.Trees.Node.Parent">
            <summary>
            Gets the parent node of this node.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.UI.Parsing.Trees.Node.ChildNodes">
            <summary>
            Gets the child nodes of this node.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.UI.Parsing.Trees.Node.Metadata">
            <summary>
            Gets the metadata of this node.
            </summary>
        </member>
        <member name="P:IdleOfTheAgesLib.UI.Parsing.Trees.Node.HtmlTag">
            <summary>
            Gets the HTML tag that this node is for.
            </summary>
        </member>
        <member name="M:IdleOfTheAgesLib.UI.Parsing.Trees.Node.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IdleOfTheAgesLib.UI.Parsing.Trees.Node"/> class.
            </summary>
            <param name="htmlTag">The HTML tag this node is parsing.</param>
        </member>
        <member name="M:IdleOfTheAgesLib.UI.Parsing.Trees.Node.AddChildNode(IdleOfTheAgesLib.UI.Parsing.Trees.Node)">
            <summary>
            Adds a node as a child of this node.
            </summary>
            <param name="child">The child node of this node.</param>
        </member>
        <member name="M:IdleOfTheAgesLib.UI.Parsing.Trees.Node.AddMetadata(System.String,System.String)">
            <summary>
            Add Metadata.
            </summary>
            <param name="key">key.</param>
            <param name="value">value.</param>
        </member>
        <member name="T:IdleOfTheAgesLib.UI.Parsing.UIModelAttribute">
            <summary>
            An attribute used to indicate that a class is a model for UI.
            </summary>
        </member>
        <member name="T:IdleOfTheAgesLib.User.IPlayerService">
            <summary>
            A service that holds all relevant information about the player.
            <para>For information about the user, see <see cref="T:IdleOfTheAgesLib.User.IUserService"/>.</para>
            </summary>
        </member>
        <member name="T:IdleOfTheAgesLib.User.IUserService">
            <summary>
            A service that holds all relevant information about the user.
            <para>For information about the player, see <see cref="T:IdleOfTheAgesLib.User.IPlayerService"/>.</para>
            </summary>
        </member>
    </members>
</doc>
